// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Entities;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(TalkingTopiaContext))]
    partial class TalkingTopiaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Web.Entities.ApplyList", b =>
                {
                    b.Property<int>("ApplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApplyID")
                        .HasComment("申請Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplyId"));

                    b.Property<DateTime>("ApplyDateTime")
                        .HasColumnType("datetime")
                        .HasComment("申請日期");

                    b.Property<bool>("ApplyStatus")
                        .HasColumnType("bit")
                        .HasComment("申請狀態");

                    b.Property<DateTime?>("ApprovedDateTime")
                        .HasColumnType("datetime")
                        .HasComment("審核通過時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("拒絕原因");

                    b.Property<DateTime?>("UpdateStatusDateTime")
                        .HasColumnType("datetime")
                        .HasComment("更新審核通過時間");

                    b.HasKey("ApplyId")
                        .HasName("PK__ApplyLis__F0687F91F95B14E5");

                    b.HasIndex(new[] { "MemberId" }, "IX_ApplyLists_MemberId");

                    b.ToTable("ApplyLists");

                    b.HasData(
                        new
                        {
                            ApplyId = 1,
                            ApplyDateTime = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2212),
                            ApplyStatus = true,
                            ApprovedDateTime = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2213),
                            MemberId = 1,
                            RejectReason = "無",
                            UpdateStatusDateTime = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2214)
                        },
                        new
                        {
                            ApplyId = 2,
                            ApplyDateTime = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2215),
                            ApplyStatus = false,
                            ApprovedDateTime = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2216),
                            MemberId = 2,
                            RejectReason = "不符合資格",
                            UpdateStatusDateTime = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2216)
                        });
                });

            modelBuilder.Entity("Web.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("預約Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2")
                        .HasComment("預約上課日期");

                    b.Property<short>("BookingTime")
                        .HasColumnType("smallint")
                        .HasComment("預約上課時間");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("課程Id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("預約學生Id");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("更新時間");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951AEDF4836C80");

                    b.HasIndex(new[] { "CourseId" }, "IX_Bookings_CourseId");

                    b.HasIndex(new[] { "StudentId" }, "IX_Bookings_StudentId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            BookingDate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2233),
                            BookingTime = (short)800,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2235),
                            CourseId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            BookingId = 2,
                            BookingDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingTime = (short)900,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2240),
                            CourseId = 2,
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("優惠折扣Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("折扣代碼");

                    b.Property<string>("CouponName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength()
                        .HasComment("優惠折扣名稱");

                    b.Property<int?>("Discount")
                        .HasColumnType("int")
                        .HasComment("折扣");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int")
                        .HasComment("折扣方式");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasComment("折扣到期日");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("是否有效");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("更新時間");

                    b.HasKey("CouponId")
                        .HasName("PK__Coupons__384AF1BAE1D06BB9");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            CouponId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2174),
                            CouponCode = "SUMMER2024",
                            CouponName = "夏季優惠",
                            Discount = 10,
                            DiscountType = 1,
                            ExpirationDate = new DateTime(2024, 10, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2166),
                            IsActive = true
                        },
                        new
                        {
                            CouponId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2177),
                            CouponCode = "WELCOME2024",
                            CouponName = "新用戶優惠",
                            Discount = 20,
                            DiscountType = 1,
                            ExpirationDate = new DateTime(2024, 12, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2176),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Web.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("課程Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("課程類別Id");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<short>("CoursesStatus")
                        .HasColumnType("smallint")
                        .HasComment("課程審核狀態");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("課程詳細描述");

                    b.Property<decimal>("FiftyMinUnitPrice")
                        .HasColumnType("money")
                        .HasComment("50分鐘價");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit")
                        .HasComment("是否顯示");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("課程副標題");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasComment("科目Id");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("影片封面");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("課程標題");

                    b.Property<int>("TutorId")
                        .HasColumnType("int")
                        .HasComment("學生Id");

                    b.Property<decimal>("TwentyFiveMinUnitPrice")
                        .HasColumnType("money")
                        .HasComment("25分鐘價");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("修改時間");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("影片路徑");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__C92D71A7F51F70E3");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CategoryId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1941),
                            CoursesStatus = (short)1,
                            Description = "適合初學者的 C# 課程",
                            FiftyMinUnitPrice = 900m,
                            IsEnabled = true,
                            SubTitle = "從零開始學習 C#",
                            SubjectId = 1,
                            ThumbnailUrl = "csharp.jpg",
                            Title = "C# 入門",
                            TutorId = 1,
                            TwentyFiveMinUnitPrice = 500m,
                            VideoUrl = "csharp_intro.mp4"
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1944),
                            CoursesStatus = (short)1,
                            Description = "日語入門課程",
                            FiftyMinUnitPrice = 800m,
                            IsEnabled = true,
                            SubTitle = "基礎日語學習",
                            SubjectId = 2,
                            ThumbnailUrl = "japanese.jpg",
                            Title = "日語 N5",
                            TutorId = 2,
                            TwentyFiveMinUnitPrice = 400m,
                            VideoUrl = "japanese_intro.mp4"
                        },
                        new
                        {
                            CourseId = 3,
                            CategoryId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1947),
                            CoursesStatus = (short)1,
                            Description = "📅 隨時隨地進行日文學習，靈活安排時間，讓學習變得更自由！\r\n🗣️ 專屬一對一視訊教學，根據你的需求量身訂製課程內容！✨\r\n\r\n課程介紹文案：\r\n🌟 在全球化的今天，會一門外語是多麼重要！🌍 無論是工作、旅遊✈️還是單純的興趣，學習日文將為你開啟通往日本文化的大門！我們提供專業的線上日文家教，讓你隨時隨地都能學習日文📖，無需擔心地理限制和時間安排的困擾！透過我們的一對一教學，你可以根據自身的學習進度隨時提出問題，獲得即時回饋！💬\r\n\r\n🎥 透過高品質的視訊平台，專業的老師將與你進行一對一的互動，這樣不僅能建立更密切的師生關係🤝，也能確保每堂課都能充分關注你的學習進度和需求。這是在傳統教室中難以實現的優勢！我們的老師將幫助你克服任何學習上的障礙，並給予鼓勵💪，讓學習不再孤單。\r\n\r\n🎳 無論你是語言學習的新手，還是想要進一步提升日文能力的學生，我們的課程都可以根據你的基礎和目標來調整！📈無論是學習日常對話、商務日文📊還是準備JLPT考試🚀，我們都能提供最合適的學習計畫！從發音基礎到語法結構，每一個細節都不會被忽略。\r\n\r\n📚 我們的教師將利用各種多媒體教材📹和互動練習🎮，讓你愉快地學習日文，這包括視聽材料、遊戲、角色扮演及小組討論等多種形式，提升你的聽、說、讀、寫能力。即使是最枯燥的文法📜，在這種輕鬆的氛圍下也變得趣味盎然！\r\n\r\n🌈 除了語言課程，我們的教師將額外分享豐富的日本文化🇯🇵，包括日本的習俗、音樂🎶、美食🍱等，讓你在學習日文的同時，也能欣賞到日本的美好文化。每一堂課都會為你帶來全新的文化體驗😍，讓你不僅是學習文字，更是了解背後的故事！\r\n\r\n🍣 課程中不僅僅是口語練習，老師還將分享正宗的日本料理🍜食譜，幫助你在學習語言的同時，學會一些日本美食的製作！👩‍🍳 你會驚喜於食物背後的文化和歷史，這樣的學習過程使得每堂課都更生動且充滿趣味。\r\n\r\n🏆 現在就加入我們的線上日文家教，設定你自己的學習目標🎯，並開始輕鬆學習！不再只是枯燥的背單字，讓我們用互動式教學讓每次課堂都成為你期待的學習時光！⏰ 在老師的指導下，你很快將能日常自信地用日文交流！\r\n\r\n🎉 無論是準備考試📚、赴日旅行✈️或職場交流，專屬的老師會全力支持你，幫助你達成目標！報名後，無需花費時間尋找合適的教材📦，我們將為你精心準備學習資源，讓你快速進步！🚀 快來預約你的第一堂課，開始放飛你的日文夢想，開啟一段全新的學習旅程吧！🌟",
                            FiftyMinUnitPrice = 1088m,
                            IsEnabled = true,
                            SubTitle = "💡 從基礎到高階語法—全面提升你的日語能力！",
                            SubjectId = 2,
                            ThumbnailUrl = "~/image/thumb_nails/thumbnail_demo_jp_001.webp",
                            Title = "Akimo老師 🔥精通日語：掌握這門全球流行語言的鑰匙！",
                            TutorId = 4,
                            TwentyFiveMinUnitPrice = 560m,
                            VideoUrl = "https://www.youtube.com/embed/MAhD37a7AlE"
                        },
                        new
                        {
                            CourseId = 4,
                            CategoryId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1950),
                            CoursesStatus = (short)1,
                            Description = "課程亮點\r\n👶 無論你是剛開始學習英語的初學者，還是想進一步提升口說能力的中級者，我都有合適的教材與方法，讓你逐步克服語言學習的恐懼。\r\n💪 我會引導你在小組討論中與同學練習，透過彼此交流增強口語表達能力。藉助故事、角色扮演以及多媒體資源，我們將一起深入了解英語的美妙！\r\n\r\n自我介紹\r\n❤️ 我熱愛教育，並堅信教育的力量。看到學生從一開始的羞怯逐漸轉變為自信的表達者，這讓我感到無比的成就感。\r\n🎭 在課堂上，我將使用多樣化的教學方法，透過互動遊戲和小組活動，讓你們在享受學習的過程中輕鬆掌握英語。\r\n🌟 我相信，每位學生都是獨一無二的，所以我會耐心地了解每個人的學習需求，並提供針對性的建議和指導。\r\n\r\n課程內容\r\n💬 課程涵蓋日常對話、商業英語、旅遊英語等多個主題，無論你的學習目的為何，都能找到適合的學習內容。\r\n🎉 我會設計有趣的實境練習，讓你能在模擬情境中實踐所學，並且定期進行小組演講和討論，讓你能夠在實際對話中應用所學的知識。\r\n📚 課後，我會提供額外的學習資源和練習題，幫助你持續進步，如影片推薦、English podcasts、以及值得一試的線上學習平台。\r\n\r\n新生福利\r\n🎁 加入我們的課程後，你將獲得一份專屬學習計畫，這份計畫將幫助你規劃和追蹤自己的學習進度，讓你時刻在正確的方向前進。\r\n🌈 我會定期提供語言測試和反饋，確保每位學生都能清楚自己的進步狀況，並持續調整學習策略。\r\n🥳 特別的學習小禮物也會隨著課程頒發，如實用的英語學習工具和資源，讓你的學習之路充滿驚喜！\r\n\r\n期待在課堂上與你見面，一同展開這段精彩的英語學習旅程吧！讓我們一起成為英語口說的高手！👋",
                            FiftyMinUnitPrice = 1100m,
                            IsEnabled = true,
                            SubTitle = "✨ 從零開始，到流利對話的輕鬆之旅！",
                            SubjectId = 1,
                            ThumbnailUrl = "~/image/thumb_nails/thumbnail_demo_tw_001.webp",
                            Title = "🌟 英語口說提升班：讓你自信流利講英語的最佳選擇",
                            TutorId = 5,
                            TwentyFiveMinUnitPrice = 700m,
                            VideoUrl = "https://www.youtube.com/embed/YX6KZIcUeY8?list=PLqivELodHt3jq3oWBZfdhMu0GE7774HBW"
                        });
                });

            modelBuilder.Entity("Web.Entities.CourseCategory", b =>
                {
                    b.Property<int>("CourseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("課程類別Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseCategoryId"));

                    b.Property<string>("CategorytName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("課程類別名稱");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("課程Id");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("更新時間");

                    b.HasKey("CourseCategoryId")
                        .HasName("PK__CourseCa__4D67EBB68E28BA31");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseCategorites_CourseId");

                    b.ToTable("CourseCategories");

                    b.HasData(
                        new
                        {
                            CourseCategoryId = 1,
                            CategorytName = "語言學習",
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1989),
                            CourseId = 1
                        },
                        new
                        {
                            CourseCategoryId = 2,
                            CategorytName = "程式設計",
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1990),
                            CourseId = 2
                        },
                        new
                        {
                            CourseCategoryId = 3,
                            CategorytName = "升學科目",
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1992),
                            CourseId = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.CourseHour", b =>
                {
                    b.Property<int>("CourseHourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("課程時間Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseHourId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("小時時段");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("更改時間");

                    b.HasKey("CourseHourId")
                        .HasName("PK__CourseHo__AE73575BBC30FF2E");

                    b.ToTable("CourseHours");

                    b.HasData(
                        new
                        {
                            CourseHourId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1970),
                            Hour = "08:00-09:00"
                        },
                        new
                        {
                            CourseHourId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1972),
                            Hour = "09:00-10:00"
                        });
                });

            modelBuilder.Entity("Web.Entities.CourseImage", b =>
                {
                    b.Property<int>("CourseImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("課程照片Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseImageId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("課程Id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("圖片路徑");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("更改時間");

                    b.HasKey("CourseImageId")
                        .HasName("PK__CourseIm__349B6FE480594337");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseImages_CourseId");

                    b.ToTable("CourseImages");

                    b.HasData(
                        new
                        {
                            CourseImageId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2082),
                            CourseId = 1,
                            ImageUrl = "https://picsum.photos/id/100/450/300"
                        },
                        new
                        {
                            CourseImageId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2084),
                            CourseId = 1,
                            ImageUrl = "https://picsum.photos/id/101/450/300"
                        },
                        new
                        {
                            CourseImageId = 3,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2085),
                            CourseId = 1,
                            ImageUrl = "https://picsum.photos/id/102/450/300"
                        },
                        new
                        {
                            CourseImageId = 4,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2086),
                            CourseId = 2,
                            ImageUrl = "https://picsum.photos/id/103/450/300"
                        },
                        new
                        {
                            CourseImageId = 5,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2087),
                            CourseId = 2,
                            ImageUrl = "https://picsum.photos/id/104/450/300"
                        },
                        new
                        {
                            CourseImageId = 6,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2088),
                            CourseId = 2,
                            ImageUrl = "https://picsum.photos/id/105/450/300"
                        },
                        new
                        {
                            CourseImageId = 7,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2089),
                            CourseId = 3,
                            ImageUrl = "https://picsum.photos/id/106/450/300"
                        },
                        new
                        {
                            CourseImageId = 8,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2090),
                            CourseId = 3,
                            ImageUrl = "https://picsum.photos/id/107/450/300"
                        },
                        new
                        {
                            CourseImageId = 9,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2091),
                            CourseId = 3,
                            ImageUrl = "https://picsum.photos/id/108/450/300"
                        },
                        new
                        {
                            CourseImageId = 10,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2092),
                            CourseId = 4,
                            ImageUrl = "https://picsum.photos/id/109/450/300"
                        },
                        new
                        {
                            CourseImageId = 11,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2093),
                            CourseId = 4,
                            ImageUrl = "https://picsum.photos/id/110/450/300"
                        },
                        new
                        {
                            CourseImageId = 12,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2094),
                            CourseId = 4,
                            ImageUrl = "https://picsum.photos/id/111/450/300"
                        });
                });

            modelBuilder.Entity("Web.Entities.CourseSubject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("課程科目Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int>("CourseCategoryId")
                        .HasColumnType("int")
                        .HasComment("課程類別Id");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("課程科目名稱");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("更新時間");

                    b.HasKey("SubjectId")
                        .HasName("PK__CourseSu__AC1BA3A8B5819935");

                    b.HasIndex(new[] { "CourseCategoryId" }, "IX_CourseSubjects_CourseCategoryId");

                    b.ToTable("CourseSubjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2007),
                            CourseCategoryId = 1,
                            SubjectName = "英文"
                        },
                        new
                        {
                            SubjectId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2008),
                            CourseCategoryId = 1,
                            SubjectName = "日文"
                        },
                        new
                        {
                            SubjectId = 3,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2010),
                            CourseCategoryId = 1,
                            SubjectName = "中文"
                        },
                        new
                        {
                            SubjectId = 4,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2011),
                            CourseCategoryId = 1,
                            SubjectName = "德文"
                        },
                        new
                        {
                            SubjectId = 5,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2012),
                            CourseCategoryId = 1,
                            SubjectName = "法文"
                        },
                        new
                        {
                            SubjectId = 6,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2013),
                            CourseCategoryId = 1,
                            SubjectName = "西班牙文"
                        },
                        new
                        {
                            SubjectId = 7,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2014),
                            CourseCategoryId = 2,
                            SubjectName = "HTML/CSS"
                        },
                        new
                        {
                            SubjectId = 8,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2015),
                            CourseCategoryId = 2,
                            SubjectName = "JavaScript"
                        },
                        new
                        {
                            SubjectId = 9,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2016),
                            CourseCategoryId = 2,
                            SubjectName = "C#"
                        },
                        new
                        {
                            SubjectId = 10,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2017),
                            CourseCategoryId = 2,
                            SubjectName = "SQL"
                        },
                        new
                        {
                            SubjectId = 11,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2018),
                            CourseCategoryId = 2,
                            SubjectName = "Python"
                        },
                        new
                        {
                            SubjectId = 12,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2019),
                            CourseCategoryId = 2,
                            SubjectName = "Java"
                        },
                        new
                        {
                            SubjectId = 13,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2020),
                            CourseCategoryId = 3,
                            SubjectName = "數學"
                        },
                        new
                        {
                            SubjectId = 14,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2021),
                            CourseCategoryId = 3,
                            SubjectName = "物理"
                        },
                        new
                        {
                            SubjectId = 15,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2024),
                            CourseCategoryId = 3,
                            SubjectName = "化學"
                        },
                        new
                        {
                            SubjectId = 16,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2025),
                            CourseCategoryId = 3,
                            SubjectName = "歷史"
                        },
                        new
                        {
                            SubjectId = 17,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2026),
                            CourseCategoryId = 3,
                            SubjectName = "地理"
                        },
                        new
                        {
                            SubjectId = 18,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2027),
                            CourseCategoryId = 3,
                            SubjectName = "生物"
                        });
                });

            modelBuilder.Entity("Web.Entities.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("學歷Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("科系名稱");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("學校名稱");

                    b.Property<int>("StudyEndYear")
                        .HasColumnType("int")
                        .HasComment("在學期間迄");

                    b.Property<int>("StudyStartYear")
                        .HasColumnType("int")
                        .HasComment("在學期間起");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("修改時間");

                    b.HasKey("EducationId")
                        .HasName("PK__Educatio__4BBE38058A56247B");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1796),
                            DepartmentName = "資訊工程",
                            SchoolName = "台灣大學",
                            StudyEndYear = 2014,
                            StudyStartYear = 2010,
                            Udate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1811)
                        },
                        new
                        {
                            EducationId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1817),
                            DepartmentName = "數學系",
                            SchoolName = "東京大學",
                            StudyEndYear = 2016,
                            StudyStartYear = 2012,
                            Udate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1818)
                        },
                        new
                        {
                            EducationId = 3,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1819),
                            DepartmentName = "經濟系",
                            SchoolName = "哈佛大學",
                            StudyEndYear = 2019,
                            StudyStartYear = 2015,
                            Udate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1820)
                        });
                });

            modelBuilder.Entity("Web.Entities.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("帳號");

                    b.Property<int>("AccountType")
                        .HasColumnType("int")
                        .HasComment("帳號類型");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("帳戶名稱");

                    b.Property<string>("BankCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("銀行代碼");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime")
                        .HasComment("生日");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int?>("EducationId")
                        .HasColumnType("int")
                        .HasComment("最高學歷Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("電子郵件信箱");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("名字");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint")
                        .HasComment("性別");

                    b.Property<string>("HeadShotImage")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("會員頭像");

                    b.Property<bool>("IsTutor")
                        .HasColumnType("bit")
                        .HasComment("是否為教師");

                    b.Property<bool>("IsVerifiedTutor")
                        .HasColumnType("bit")
                        .HasComment("優質會員");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("姓氏");

                    b.Property<int?>("NationId")
                        .HasColumnType("int")
                        .HasComment("國籍Id");

                    b.Property<string>("NativeLanguage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("母語");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("綽號");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("密碼");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength()
                        .HasComment("電話");

                    b.Property<string>("SpokenLanguage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("會的語言");

                    b.Property<string>("TutorIntro")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("教師自介");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("更新時間");

                    b.HasKey("MemberId")
                        .HasName("PK__Members__0CF04B1808627D7C");

                    b.HasIndex(new[] { "EducationId" }, "IX_Members_EducationId");

                    b.HasIndex(new[] { "NationId" }, "IX_Members_NationId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            MemberId = 1,
                            Account = "xiaoming_account",
                            AccountType = 1,
                            BankAccount = "12345678",
                            BankCode = "123",
                            Birthday = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1883),
                            EducationId = 1,
                            Email = "xiaoming@example.com",
                            FirstName = "小明",
                            Gender = (short)1,
                            HeadShotImage = "xiaoming.jpg",
                            IsTutor = true,
                            IsVerifiedTutor = true,
                            LastName = "王",
                            NationId = 1,
                            NativeLanguage = "中文",
                            Nickname = "明哥",
                            Password = "hashedpassword1",
                            Phone = "0912345678",
                            SpokenLanguage = "英文",
                            TutorIntro = "專業C#講師",
                            Udate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1885)
                        },
                        new
                        {
                            MemberId = 2,
                            Account = "ken_account",
                            AccountType = 2,
                            BankAccount = "87654321",
                            BankCode = "456",
                            Birthday = new DateTime(1985, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1890),
                            EducationId = 2,
                            Email = "ken@example.com",
                            FirstName = "健",
                            Gender = (short)1,
                            HeadShotImage = "ken.jpg",
                            IsTutor = false,
                            IsVerifiedTutor = false,
                            LastName = "佐藤",
                            NationId = 2,
                            NativeLanguage = "日語",
                            Nickname = "健哥",
                            Password = "hashedpassword2",
                            Phone = "0800123456",
                            SpokenLanguage = "中文",
                            TutorIntro = "日語教學專家",
                            Udate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1891)
                        },
                        new
                        {
                            MemberId = 3,
                            Account = "john_doe_account",
                            AccountType = 1,
                            BankAccount = "98765432",
                            BankCode = "789",
                            Birthday = new DateTime(1992, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1895),
                            EducationId = 3,
                            Email = "john@example.com",
                            FirstName = "John",
                            Gender = (short)1,
                            HeadShotImage = "john_doe.jpg",
                            IsTutor = true,
                            IsVerifiedTutor = true,
                            LastName = "Doe",
                            NationId = 3,
                            NativeLanguage = "英文",
                            Nickname = "Johnny",
                            Password = "hashedpassword3",
                            Phone = "0700123456",
                            SpokenLanguage = "西班牙語",
                            TutorIntro = "資深英語導師",
                            Udate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1896)
                        },
                        new
                        {
                            MemberId = 4,
                            Account = "akimo_account",
                            AccountType = 1,
                            BankAccount = "98765432",
                            BankCode = "700",
                            Birthday = new DateTime(1990, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1900),
                            EducationId = 3,
                            Email = "akimo@example.com",
                            FirstName = "Akimo",
                            Gender = (short)0,
                            HeadShotImage = "~/image/tutor_headshot_imgs/tutor_demo_jp_001.webp",
                            IsTutor = true,
                            IsVerifiedTutor = true,
                            LastName = "Sato",
                            NationId = 2,
                            NativeLanguage = "日文",
                            Nickname = "Akimo",
                            Password = "hashedpassword4",
                            Phone = "0711111111",
                            SpokenLanguage = "日文",
                            TutorIntro = "こんにちは！👋 私は Akimoです。生まれも育ちも日本で、日本語を教えることに情熱を持っています。🇯🇵 私は大学で日本語教育を専攻し、修士課程を修了後、さまざまな学校や語学機関で7年間教鞭を執ってきました。📚 これまでに、世界中の多くの学生たちに日本語の魅力を伝え、彼らが日本語能力試験に合格し、仕事や日常生活で日本語を自由に使えるようにサポートしてきました。🎓\r\n\r\n私は、生徒一人ひとりの個性を大切にし、それぞれの目標に応じた最適な学習プランを提供します。🎯 私の授業では、単なる文法や単語の暗記だけでなく、実際に使える日本語を身につけることに重点を置いています。具体的な場面を想定した会話練習や、文化についてのディスカッションを通じて、言葉の背景にある日本の文化や価値観も理解していただけるよう努めています。🎌\r\n\r\n私の目標は、皆さんが日本語を学ぶ楽しさを実感し、自信を持って日本語を使えるようになることです。💪 一緒に日本語の世界を探求し、新しい可能性を広げていきましょう！🚀 お会いできるのを楽しみにしています。😊",
                            Udate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1901)
                        },
                        new
                        {
                            MemberId = 5,
                            Account = "david_account",
                            AccountType = 1,
                            BankAccount = "98765432",
                            BankCode = "789",
                            Birthday = new DateTime(1993, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1905),
                            EducationId = 3,
                            Email = "todd@example.com",
                            FirstName = "大衛",
                            Gender = (short)1,
                            HeadShotImage = "~/image/tutor_headshot_imgs/tutor_head_002.png",
                            IsTutor = true,
                            IsVerifiedTutor = false,
                            LastName = "李",
                            NationId = 1,
                            NativeLanguage = "英文",
                            Nickname = "David",
                            Password = "hashedpassword5",
                            Phone = "0700222454",
                            SpokenLanguage = "英文 中文",
                            TutorIntro = "嗨！我是 👩‍🏫 李老師，擁有 10 年的教學經驗！📚\r\n\r\n🎓 我持有 英文教師證 的證書，並且擁有多次國際英語教學的實戰經驗。對於不同年齡層的學生，我都有教學的方法與技巧，尤其擅長讓學習變得有趣且富有成效。🌈\r\n\r\n在這堂課中，我會根據學生的需求和程度量身定製教學計畫，讓每一位學生都能在輕鬆的氛圍中學習。課程的設計旨在建立自信心，讓你能夠在日常生活中自如地使用英語，無論是與朋友交談、旅遊還是商務會議中，都能夠流利溝通。🚀",
                            Udate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(1905)
                        });
                });

            modelBuilder.Entity("Web.Entities.MemberCoupon", b =>
                {
                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasComment("優惠折扣Id");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasComment("是否使用");

                    b.Property<int>("MemberCouponId")
                        .HasColumnType("int")
                        .HasComment("會員優惠Id");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.HasIndex(new[] { "CouponId" }, "IX_MemberCoupons_CouponId");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberCoupons_MemberId");

                    b.ToTable("MemberCoupons");
                });

            modelBuilder.Entity("Web.Entities.MemberPreference", b =>
                {
                    b.Property<int>("MemberPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("會員偏好Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberPreferenceId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.Property<int>("SubjecId")
                        .HasColumnType("int")
                        .HasComment("主題Id");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("修改時間");

                    b.HasKey("MemberPreferenceId")
                        .HasName("PK__MemberPr__5B2A2D7058311916");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberPreferences_MemberId");

                    b.HasIndex(new[] { "SubjecId" }, "IX_MemberPreferences_SubjecId");

                    b.ToTable("MemberPreferences");

                    b.HasData(
                        new
                        {
                            MemberPreferenceId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2193),
                            MemberId = 1,
                            SubjecId = 1
                        },
                        new
                        {
                            MemberPreferenceId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2194),
                            MemberId = 2,
                            SubjecId = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.Nation", b =>
                {
                    b.Property<int>("NationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("國籍Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NationId"));

                    b.Property<string>("FlagImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("國籍圖片路徑");

                    b.Property<string>("NationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("國籍名稱");

                    b.HasKey("NationId")
                        .HasName("PK__Nations__211B9BBEE3B01F5C");

                    b.ToTable("Nations");

                    b.HasData(
                        new
                        {
                            NationId = 1,
                            FlagImage = "taiwan.jpg",
                            NationName = "台灣"
                        },
                        new
                        {
                            NationId = 2,
                            FlagImage = "japan.jpg",
                            NationName = "日本"
                        },
                        new
                        {
                            NationId = 3,
                            FlagImage = "usa.jpg",
                            NationName = "美國"
                        });
                });

            modelBuilder.Entity("Web.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("訂單Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<decimal?>("CouponPrice")
                        .HasColumnType("money")
                        .HasComment("優惠金額");

                    b.Property<short>("InvoiceType")
                        .HasColumnType("smallint")
                        .HasComment("發票類型");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.Property<short>("OrderStatusId")
                        .HasColumnType("smallint")
                        .HasComment("訂單狀態");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("付款方式");

                    b.Property<string>("SentVatemail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SentVATEmail")
                        .HasComment("寄送Mail");

                    b.Property<string>("TaxIdNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasComment("統一編號");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasComment("總金額");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasComment("交易日期");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("更新時間");

                    b.Property<string>("Vatnumber")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("VATNumber")
                        .HasComment("發票號碼");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BCFBCC07793");

                    b.HasIndex(new[] { "MemberId" }, "IX_Orders_MemberId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2123),
                            InvoiceType = (short)1,
                            MemberId = 1,
                            OrderStatusId = (short)1,
                            PaymentType = "Credit Card",
                            TotalPrice = 1000m,
                            TransactionDate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2122)
                        },
                        new
                        {
                            OrderId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2126),
                            InvoiceType = (short)1,
                            MemberId = 2,
                            OrderStatusId = (short)1,
                            PaymentType = "Paypal",
                            TotalPrice = 2000m,
                            TransactionDate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2125)
                        });
                });

            modelBuilder.Entity("Web.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("訂單明細Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("訂單Id");

                    b.Property<string>("CourseCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("課程類別");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("課程Id");

                    b.Property<string>("CourseSubject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("課程主題");

                    b.Property<string>("CourseTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("課程名稱");

                    b.Property<short>("CourseType")
                        .HasColumnType("smallint")
                        .HasComment("課程類別");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("money")
                        .HasComment("折扣金額");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint")
                        .HasComment("購買堂數");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasComment("總價");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasComment("課程單價");

                    b.HasKey("OrderDetailId", "OrderId")
                        .HasName("PK__OrderDet__3F80D6D0305DA525");

                    b.HasIndex(new[] { "CourseId" }, "IX_OrderDetails_CourseId");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderDetails_OrderId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            CourseCategory = "程式設計",
                            CourseId = 1,
                            CourseSubject = "C#",
                            CourseTitle = "C# 入門",
                            CourseType = (short)1,
                            Quantity = (short)2,
                            TotalPrice = 1000m,
                            UnitPrice = 500m
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 2,
                            CourseCategory = "語言學習",
                            CourseId = 2,
                            CourseSubject = "日語",
                            CourseTitle = "日語 N5",
                            CourseType = (short)1,
                            Quantity = (short)2,
                            TotalPrice = 2000m,
                            UnitPrice = 1000m
                        });
                });

            modelBuilder.Entity("Web.Entities.ProfessionalLicense", b =>
                {
                    b.Property<int>("ProfessionalLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("證照Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessionalLicenseId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.Property<string>("ProfessionalLicenseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("證照名稱");

                    b.Property<string>("ProfessionalLicenseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("證照路徑");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("更新時間");

                    b.HasKey("ProfessionalLicenseId")
                        .HasName("PK__Professi__E1630CEE26905146");

                    b.HasIndex(new[] { "MemberId" }, "IX_ProfessionalLicenses_MemberId");

                    b.ToTable("ProfessionalLicenses");

                    b.HasData(
                        new
                        {
                            ProfessionalLicenseId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2256),
                            MemberId = 1,
                            ProfessionalLicenseName = "C# 認證",
                            ProfessionalLicenseUrl = "csharp_certificate.jpg"
                        },
                        new
                        {
                            ProfessionalLicenseId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2257),
                            MemberId = 2,
                            ProfessionalLicenseName = "日語能力測驗 N1",
                            ProfessionalLicenseUrl = "jlpt_n1.jpg"
                        });
                });

            modelBuilder.Entity("Web.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("課程評論Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("評論日期");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("評論內容");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("課程Id");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint")
                        .HasComment("評分");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("學生Id");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("修改日期");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79CE821ED086");

                    b.HasIndex(new[] { "CourseId" }, "IX_Reviews_CourseId");

                    b.HasIndex(new[] { "StudentId" }, "IX_Reviews_StudentId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2275),
                            CommentText = "很棒的課程！",
                            CourseId = 1,
                            Rating = (byte)5,
                            StudentId = 1
                        },
                        new
                        {
                            ReviewId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2276),
                            CommentText = "非常實用！",
                            CourseId = 2,
                            Rating = (byte)4,
                            StudentId = 2
                        },
                        new
                        {
                            ReviewId = 3,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2278),
                            CommentText = "講得不錯! 但笑話有點冷",
                            CourseId = 1,
                            Rating = (byte)4,
                            StudentId = 2
                        },
                        new
                        {
                            ReviewId = 4,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2279),
                            CommentText = "讚讚讚",
                            CourseId = 1,
                            Rating = (byte)4,
                            StudentId = 3
                        });
                });

            modelBuilder.Entity("Web.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("購物車Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartId"));

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime")
                        .HasComment("預約日期");

                    b.Property<DateTime?>("BookingTime")
                        .HasColumnType("datetime")
                        .HasComment("預約時間");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("課程Id");

                    b.Property<short>("CourseType")
                        .HasColumnType("smallint")
                        .HasComment("課程類型");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint")
                        .HasComment("購買堂數");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasComment("單筆總價");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("修改時間");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasComment("課程單價");

                    b.HasKey("ShoppingCartId")
                        .HasName("PK__TempOrde__38D216B780E2926D");

                    b.HasIndex(new[] { "CourseId" }, "IX_ShoppingCarts_CourseId");

                    b.HasIndex(new[] { "MemberId" }, "IX_ShoppingCarts_MemberId");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            ShoppingCartId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2302),
                            CourseId = 1,
                            CourseType = (short)1,
                            MemberId = 1,
                            Quantity = (short)2,
                            TotalPrice = 1000m,
                            UnitPrice = 500m
                        },
                        new
                        {
                            ShoppingCartId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2304),
                            CourseId = 2,
                            CourseType = (short)1,
                            MemberId = 2,
                            Quantity = (short)1,
                            TotalPrice = 1000m,
                            UnitPrice = 1000m
                        });
                });

            modelBuilder.Entity("Web.Entities.ShoppingCartBooking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("課程預定Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateOnly?>("BookingDate")
                        .HasColumnType("date")
                        .HasComment("預約日期");

                    b.Property<short?>("BookingTime")
                        .HasColumnType("smallint")
                        .HasComment("預約時間");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasComment("課程Id");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.Property<int?>("TempShoppingCartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("修改時間");

                    b.HasKey("BookingId")
                        .HasName("PK__Shopping__73951AED7A624397");

                    b.HasIndex(new[] { "TempShoppingCartId" }, "IX_ShoppingCartBookings_TempShoppingCartId");

                    b.ToTable("ShoppingCartBookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            BookingTime = (short)800,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2325),
                            CourseId = 1,
                            MemberId = 1,
                            TempShoppingCartId = 1
                        },
                        new
                        {
                            BookingId = 2,
                            BookingTime = (short)900,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2327),
                            CourseId = 2,
                            MemberId = 2,
                            TempShoppingCartId = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.TutorTimeSlot", b =>
                {
                    b.Property<int>("TutorTimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("教師可預約Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorTimeSlotId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasComment("預約課程Id");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int>("CourseHourId")
                        .HasColumnType("int")
                        .HasComment("開課時間");

                    b.Property<int>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID")
                        .HasComment("老師Id");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("修改時間");

                    b.Property<int>("Weekday")
                        .HasColumnType("int")
                        .HasComment("開課星期");

                    b.HasKey("TutorTimeSlotId")
                        .HasName("PK__TutorTim__E709EE17B13CB862");

                    b.HasIndex(new[] { "BookingId" }, "IX_TutorTimeSlots_BookingId");

                    b.HasIndex(new[] { "CourseHourId" }, "IX_TutorTimeSlots_CourseHourId");

                    b.HasIndex(new[] { "TutorId" }, "IX_TutorTimeSlots_TutorID");

                    b.ToTable("TutorTimeSlots");

                    b.HasData(
                        new
                        {
                            TutorTimeSlotId = 1,
                            BookingId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2342),
                            CourseHourId = 1,
                            TutorId = 1,
                            Weekday = 1
                        },
                        new
                        {
                            TutorTimeSlotId = 2,
                            BookingId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2344),
                            CourseHourId = 2,
                            TutorId = 2,
                            Weekday = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("工作經驗Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkExperienceId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate")
                        .HasComment("建立時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate")
                        .HasComment("修改時間");

                    b.Property<DateTime>("WorkEndDate")
                        .HasColumnType("datetime")
                        .HasComment("工作結束日");

                    b.Property<string>("WorkExperienceFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("工作經驗檔案路徑");

                    b.Property<string>("WorkName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("工作經驗名稱");

                    b.Property<DateTime>("WorkStartDate")
                        .HasColumnType("datetime")
                        .HasComment("工作起始日");

                    b.HasKey("WorkExperienceId")
                        .HasName("PK__WorkExpe__55A2B889201583D4");

                    b.HasIndex(new[] { "MemberId" }, "IX_WorkExperiences_MemberId");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            WorkExperienceId = 1,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2362),
                            MemberId = 1,
                            WorkEndDate = new DateTime(2023, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2361),
                            WorkExperienceFile = "csharp_experience.pdf",
                            WorkStartDate = new DateTime(2021, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2360)
                        },
                        new
                        {
                            WorkExperienceId = 2,
                            Cdate = new DateTime(2024, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2365),
                            MemberId = 2,
                            WorkEndDate = new DateTime(2022, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2364),
                            WorkExperienceFile = "japanese_experience.pdf",
                            WorkStartDate = new DateTime(2019, 9, 1, 15, 48, 7, 402, DateTimeKind.Local).AddTicks(2363)
                        });
                });

            modelBuilder.Entity("Web.Entities.ApplyList", b =>
                {
                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("ApplyLists")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK__ApplyList__Membe__59FA5E80");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.Booking", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("Bookings")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__Course__5441852A");

                    b.HasOne("Web.Entities.Member", "Student")
                        .WithMany("Bookings")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__Member__534D60F1");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Web.Entities.CourseCategory", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("CourseCategories")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseCat__Cours__5812160E");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Web.Entities.CourseImage", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("CourseImages")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseIma__Cours__52593CB8");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Web.Entities.CourseSubject", b =>
                {
                    b.HasOne("Web.Entities.CourseCategory", "CourseCategory")
                        .WithMany("CourseSubjects")
                        .HasForeignKey("CourseCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseSub__Cours__59063A47");

                    b.Navigation("CourseCategory");
                });

            modelBuilder.Entity("Web.Entities.Member", b =>
                {
                    b.HasOne("Web.Entities.Education", "Education")
                        .WithMany("Members")
                        .HasForeignKey("EducationId")
                        .HasConstraintName("FK__Members__Educati__49C3F6B7");

                    b.HasOne("Web.Entities.Nation", "Nation")
                        .WithMany("Members")
                        .HasForeignKey("NationId")
                        .HasConstraintName("FK__Members__NationI__48CFD27E");

                    b.Navigation("Education");

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("Web.Entities.MemberCoupon", b =>
                {
                    b.HasOne("Web.Entities.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberCoupons_Coupons");

                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberCoupons_Members");

                    b.Navigation("Coupon");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.MemberPreference", b =>
                {
                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("MemberPreferences")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK__MemberPre__Membe__5AEE82B9");

                    b.HasOne("Web.Entities.CourseSubject", "Subjec")
                        .WithMany("MemberPreferences")
                        .HasForeignKey("SubjecId")
                        .IsRequired()
                        .HasConstraintName("FK__MemberPre__Subje__52593CB8");

                    b.Navigation("Member");

                    b.Navigation("Subjec");
                });

            modelBuilder.Entity("Web.Entities.Order", b =>
                {
                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__MemberId__4BAC3F29");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.OrderDetail", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Cours__4E88ABD4");

                    b.HasOne("Web.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Order__4D94879B");

                    b.Navigation("Course");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Web.Entities.ProfessionalLicense", b =>
                {
                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("ProfessionalLicenses")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK__Professio__Membe__5165187F");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.Review", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__CourseI__5070F446");

                    b.HasOne("Web.Entities.Member", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__MemberI__4F7CD00D");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Web.Entities.ShoppingCart", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingCarts_Courses");

                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingCarts_Members");

                    b.Navigation("Course");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.ShoppingCartBooking", b =>
                {
                    b.HasOne("Web.Entities.ShoppingCart", "TempShoppingCart")
                        .WithMany("ShoppingCartBookings")
                        .HasForeignKey("TempShoppingCartId")
                        .HasConstraintName("FK__TempShopp__TempS__60A75C0F");

                    b.Navigation("TempShoppingCart");
                });

            modelBuilder.Entity("Web.Entities.TutorTimeSlot", b =>
                {
                    b.HasOne("Web.Entities.Booking", "Booking")
                        .WithMany("TutorTimeSlots")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__TutorTime__Booki__5DCAEF64");

                    b.HasOne("Web.Entities.CourseHour", "CourseHour")
                        .WithMany("TutorTimeSlots")
                        .HasForeignKey("CourseHourId")
                        .IsRequired()
                        .HasConstraintName("FK__TutorTime__Cours__5EBF139D");

                    b.HasOne("Web.Entities.Member", "Tutor")
                        .WithMany("TutorTimeSlots")
                        .HasForeignKey("TutorId")
                        .IsRequired()
                        .HasConstraintName("FK__TutorTime__Membe__5535A963");

                    b.Navigation("Booking");

                    b.Navigation("CourseHour");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Web.Entities.WorkExperience", b =>
                {
                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK__WorkExper__Membe__4AB81AF0");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.Booking", b =>
                {
                    b.Navigation("TutorTimeSlots");
                });

            modelBuilder.Entity("Web.Entities.Course", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CourseCategories");

                    b.Navigation("CourseImages");

                    b.Navigation("OrderDetails");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("Web.Entities.CourseCategory", b =>
                {
                    b.Navigation("CourseSubjects");
                });

            modelBuilder.Entity("Web.Entities.CourseHour", b =>
                {
                    b.Navigation("TutorTimeSlots");
                });

            modelBuilder.Entity("Web.Entities.CourseSubject", b =>
                {
                    b.Navigation("MemberPreferences");
                });

            modelBuilder.Entity("Web.Entities.Education", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Web.Entities.Member", b =>
                {
                    b.Navigation("ApplyLists");

                    b.Navigation("Bookings");

                    b.Navigation("MemberPreferences");

                    b.Navigation("Orders");

                    b.Navigation("ProfessionalLicenses");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("TutorTimeSlots");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Web.Entities.Nation", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Web.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Web.Entities.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartBookings");
                });
#pragma warning restore 612, 618
        }
    }
}

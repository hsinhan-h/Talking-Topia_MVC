// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Entities;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(TalkingTopiaContext))]
    [Migration("20240830095532_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Web.Entities.ApplyList", b =>
                {
                    b.Property<int>("ApplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApplyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplyId"));

                    b.Property<DateTime>("ApplyDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("ApplyStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ApprovedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateStatusDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("ApplyId")
                        .HasName("PK__ApplyLis__F0687F91F95B14E5");

                    b.HasIndex(new[] { "MemberId" }, "IX_ApplyLists_MemberId");

                    b.ToTable("ApplyLists");

                    b.HasData(
                        new
                        {
                            ApplyId = 1,
                            ApplyDateTime = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8612),
                            ApplyStatus = true,
                            ApprovedDateTime = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8612),
                            MemberId = 1,
                            RejectReason = "無",
                            UpdateStatusDateTime = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8613)
                        },
                        new
                        {
                            ApplyId = 2,
                            ApplyDateTime = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8615),
                            ApplyStatus = false,
                            ApprovedDateTime = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8615),
                            MemberId = 2,
                            RejectReason = "不符合資格",
                            UpdateStatusDateTime = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8616)
                        });
                });

            modelBuilder.Entity("Web.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("BookingTime")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951AEDF4836C80");

                    b.HasIndex(new[] { "CourseId" }, "IX_Bookings_CourseId");

                    b.HasIndex(new[] { "StudentId" }, "IX_Bookings_StudentId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            BookingDate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8635),
                            BookingTime = (short)800,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8636),
                            CourseId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            BookingId = 2,
                            BookingDate = new DateTime(2024, 8, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingTime = (short)900,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8642),
                            CourseId = 2,
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CouponName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("CouponId")
                        .HasName("PK__Coupons__384AF1BAE1D06BB9");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            CouponId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8569),
                            CouponCode = "SUMMER2024",
                            CouponName = "夏季優惠",
                            Discount = 10,
                            DiscountType = 1,
                            ExpirationDate = new DateTime(2024, 9, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8563),
                            IsActive = true
                        },
                        new
                        {
                            CouponId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8571),
                            CouponCode = "WELCOME2024",
                            CouponName = "新用戶優惠",
                            Discount = 20,
                            DiscountType = 1,
                            ExpirationDate = new DateTime(2024, 11, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8570),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Web.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<short>("CoursesStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FiftyMinUnitPrice")
                        .HasColumnType("money");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<decimal>("TwentyFiveMinUnitPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__C92D71A7F51F70E3");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CategoryId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8375),
                            CoursesStatus = (short)1,
                            Description = "適合初學者的 C# 課程",
                            FiftyMinUnitPrice = 900m,
                            IsEnabled = true,
                            SubTitle = "從零開始學習 C#",
                            SubjectId = 1,
                            ThumbnailUrl = "csharp.jpg",
                            Title = "C# 入門",
                            TutorId = 1,
                            TwentyFiveMinUnitPrice = 500m,
                            VideoUrl = "csharp_intro.mp4"
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8379),
                            CoursesStatus = (short)1,
                            Description = "日語入門課程",
                            FiftyMinUnitPrice = 800m,
                            IsEnabled = true,
                            SubTitle = "基礎日語學習",
                            SubjectId = 2,
                            ThumbnailUrl = "japanese.jpg",
                            Title = "日語 N5",
                            TutorId = 2,
                            TwentyFiveMinUnitPrice = 400m,
                            VideoUrl = "japanese_intro.mp4"
                        });
                });

            modelBuilder.Entity("Web.Entities.CourseCategorite", b =>
                {
                    b.Property<int>("CourseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseCategoryId"));

                    b.Property<string>("CategorytName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("CourseCategoryId")
                        .HasName("PK__CourseCa__4D67EBB68E28BA31");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseCategorites_CourseId");

                    b.ToTable("CourseCategorites");

                    b.HasData(
                        new
                        {
                            CourseCategoryId = 1,
                            CategorytName = "程式設計",
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8422),
                            CourseId = 1
                        },
                        new
                        {
                            CourseCategoryId = 2,
                            CategorytName = "語言學習",
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8424),
                            CourseId = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.CourseHour", b =>
                {
                    b.Property<int>("CourseHourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseHourId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("CourseHourId")
                        .HasName("PK__CourseHo__AE73575BBC30FF2E");

                    b.ToTable("CourseHours");

                    b.HasData(
                        new
                        {
                            CourseHourId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8398),
                            Hour = "08:00-09:00"
                        },
                        new
                        {
                            CourseHourId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8399),
                            Hour = "09:00-10:00"
                        });
                });

            modelBuilder.Entity("Web.Entities.CourseImage", b =>
                {
                    b.Property<int>("CourseImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseImageId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("CourseImageId")
                        .HasName("PK__CourseIm__349B6FE480594337");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseImages_CourseId");

                    b.ToTable("CourseImages");

                    b.HasData(
                        new
                        {
                            CourseImageId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8462),
                            CourseId = 1,
                            ImageUrl = "csharp_image.jpg"
                        },
                        new
                        {
                            CourseImageId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8464),
                            CourseId = 2,
                            ImageUrl = "japanese_image.jpg"
                        });
                });

            modelBuilder.Entity("Web.Entities.CourseSubject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int>("CourseCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("SubjectId")
                        .HasName("PK__CourseSu__AC1BA3A8B5819935");

                    b.HasIndex(new[] { "CourseCategoryId" }, "IX_CourseSubjects_CourseCategoryId");

                    b.ToTable("CourseSubjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8444),
                            CourseCategoryId = 1,
                            SubjectName = "C#"
                        },
                        new
                        {
                            SubjectId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8446),
                            CourseCategoryId = 2,
                            SubjectName = "日語"
                        });
                });

            modelBuilder.Entity("Web.Entities.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudyEndYear")
                        .HasColumnType("int");

                    b.Property<int>("StudyStartYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("EducationId")
                        .HasName("PK__Educatio__4BBE38058A56247B");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8259),
                            DepartmentName = "資訊工程",
                            SchoolName = "台灣大學",
                            StudyEndYear = 2014,
                            StudyStartYear = 2010,
                            Udate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8272)
                        },
                        new
                        {
                            EducationId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8277),
                            DepartmentName = "數學系",
                            SchoolName = "東京大學",
                            StudyEndYear = 2016,
                            StudyStartYear = 2012,
                            Udate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8277)
                        },
                        new
                        {
                            EducationId = 3,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8279),
                            DepartmentName = "經濟系",
                            SchoolName = "哈佛大學",
                            StudyEndYear = 2019,
                            StudyStartYear = 2015,
                            Udate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8279)
                        });
                });

            modelBuilder.Entity("Web.Entities.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int?>("EducationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("HeadShotImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTutor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerifiedTutor")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.Property<string>("NativeLanguage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.Property<string>("SpokenLanguage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TutorIntro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("MemberId")
                        .HasName("PK__Members__0CF04B1808627D7C");

                    b.HasIndex(new[] { "EducationId" }, "IX_Members_EducationId");

                    b.HasIndex(new[] { "NationId" }, "IX_Members_NationId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            MemberId = 1,
                            Account = "xiaoming_account",
                            AccountType = 1,
                            BankAccount = "12345678",
                            BankCode = "123",
                            Birthday = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8320),
                            EducationId = 1,
                            Email = "xiaoming@example.com",
                            FirstName = "小明",
                            Gender = (short)1,
                            HeadShotImage = "xiaoming.jpg",
                            IsTutor = true,
                            IsVerifiedTutor = true,
                            LastName = "王",
                            NationId = 1,
                            NativeLanguage = "中文",
                            Nickname = "明哥",
                            Password = "hashedpassword1",
                            Phone = "0912345678",
                            SpokenLanguage = "英文",
                            TutorIntro = "專業C#講師",
                            Udate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8320)
                        },
                        new
                        {
                            MemberId = 2,
                            Account = "ken_account",
                            AccountType = 2,
                            BankAccount = "87654321",
                            BankCode = "456",
                            Birthday = new DateTime(1985, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8329),
                            EducationId = 2,
                            Email = "ken@example.com",
                            FirstName = "健",
                            Gender = (short)1,
                            HeadShotImage = "ken.jpg",
                            IsTutor = false,
                            IsVerifiedTutor = false,
                            LastName = "佐藤",
                            NationId = 2,
                            NativeLanguage = "日語",
                            Nickname = "健哥",
                            Password = "hashedpassword2",
                            Phone = "0800123456",
                            SpokenLanguage = "中文",
                            TutorIntro = "日語教學專家",
                            Udate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8330)
                        },
                        new
                        {
                            MemberId = 3,
                            Account = "john_doe_account",
                            AccountType = 1,
                            BankAccount = "98765432",
                            BankCode = "789",
                            Birthday = new DateTime(1992, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8336),
                            EducationId = 3,
                            Email = "john@example.com",
                            FirstName = "John",
                            Gender = (short)1,
                            HeadShotImage = "john_doe.jpg",
                            IsTutor = true,
                            IsVerifiedTutor = true,
                            LastName = "Doe",
                            NationId = 3,
                            NativeLanguage = "英文",
                            Nickname = "Johnny",
                            Password = "hashedpassword3",
                            Phone = "0700123456",
                            SpokenLanguage = "西班牙語",
                            TutorIntro = "資深英語導師",
                            Udate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8336)
                        });
                });

            modelBuilder.Entity("Web.Entities.MemberCoupon", b =>
                {
                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("MemberCouponId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasIndex(new[] { "CouponId" }, "IX_MemberCoupons_CouponId");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberCoupons_MemberId");

                    b.ToTable("MemberCoupons");
                });

            modelBuilder.Entity("Web.Entities.MemberPreference", b =>
                {
                    b.Property<int>("MemberPreferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("SubjecId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("MemberPreferenceId")
                        .HasName("PK__MemberPr__5B2A2D7058311916");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberPreferences_MemberId");

                    b.HasIndex(new[] { "SubjecId" }, "IX_MemberPreferences_SubjecId");

                    b.ToTable("MemberPreferences");

                    b.HasData(
                        new
                        {
                            MemberPreferenceId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8591),
                            MemberId = 1,
                            SubjecId = 1
                        },
                        new
                        {
                            MemberPreferenceId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8592),
                            MemberId = 2,
                            SubjecId = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.Nation", b =>
                {
                    b.Property<int>("NationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NationId"));

                    b.Property<string>("FlagImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NationId")
                        .HasName("PK__Nations__211B9BBEE3B01F5C");

                    b.ToTable("Nations");

                    b.HasData(
                        new
                        {
                            NationId = 1,
                            FlagImage = "taiwan.jpg",
                            NationName = "台灣"
                        },
                        new
                        {
                            NationId = 2,
                            FlagImage = "japan.jpg",
                            NationName = "日本"
                        },
                        new
                        {
                            NationId = 3,
                            FlagImage = "usa.jpg",
                            NationName = "美國"
                        });
                });

            modelBuilder.Entity("Web.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<decimal?>("CouponPrice")
                        .HasColumnType("money");

                    b.Property<short>("InvoiceType")
                        .HasColumnType("smallint");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<short>("OrderStatusId")
                        .HasColumnType("smallint");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SentVatemail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SentVATEmail");

                    b.Property<string>("TaxIdNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.Property<string>("Vatnumber")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("VATNumber");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BCFBCC07793");

                    b.HasIndex(new[] { "MemberId" }, "IX_Orders_MemberId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8515),
                            InvoiceType = (short)1,
                            MemberId = 1,
                            OrderStatusId = (short)1,
                            PaymentType = "Credit Card",
                            TotalPrice = 1000m,
                            TransactionDate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8512)
                        },
                        new
                        {
                            OrderId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8518),
                            InvoiceType = (short)1,
                            MemberId = 2,
                            OrderStatusId = (short)1,
                            PaymentType = "Paypal",
                            TotalPrice = 2000m,
                            TransactionDate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8517)
                        });
                });

            modelBuilder.Entity("Web.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("CourseCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseSubject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<short>("CourseType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("money");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderDetailId", "OrderId")
                        .HasName("PK__OrderDet__3F80D6D0305DA525");

                    b.HasIndex(new[] { "CourseId" }, "IX_OrderDetails_CourseId");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderDetails_OrderId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            CourseCategory = "程式設計",
                            CourseId = 1,
                            CourseSubject = "C#",
                            CourseTitle = "C# 入門",
                            CourseType = (short)1,
                            Quantity = (short)2,
                            TotalPrice = 1000m,
                            UnitPrice = 500m
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 2,
                            CourseCategory = "語言學習",
                            CourseId = 2,
                            CourseSubject = "日語",
                            CourseTitle = "日語 N5",
                            CourseType = (short)1,
                            Quantity = (short)2,
                            TotalPrice = 2000m,
                            UnitPrice = 1000m
                        });
                });

            modelBuilder.Entity("Web.Entities.ProfessionalLicense", b =>
                {
                    b.Property<int>("ProfessionalLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessionalLicenseId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalLicenseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProfessionalLicenseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("ProfessionalLicenseId")
                        .HasName("PK__Professi__E1630CEE26905146");

                    b.HasIndex(new[] { "MemberId" }, "IX_ProfessionalLicenses_MemberId");

                    b.ToTable("ProfessionalLicenses");

                    b.HasData(
                        new
                        {
                            ProfessionalLicenseId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8663),
                            MemberId = 1,
                            ProfessionalLicenseName = "C# 認證",
                            ProfessionalLicenseUrl = "csharp_certificate.jpg"
                        },
                        new
                        {
                            ProfessionalLicenseId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8664),
                            MemberId = 2,
                            ProfessionalLicenseName = "日語能力測驗 N1",
                            ProfessionalLicenseUrl = "jlpt_n1.jpg"
                        });
                });

            modelBuilder.Entity("Web.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79CE821ED086");

                    b.HasIndex(new[] { "CourseId" }, "IX_Reviews_CourseId");

                    b.HasIndex(new[] { "StudentId" }, "IX_Reviews_StudentId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8683),
                            CommentText = "很棒的課程！",
                            CourseId = 1,
                            Rating = (byte)5,
                            StudentId = 1
                        },
                        new
                        {
                            ReviewId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8684),
                            CommentText = "非常實用！",
                            CourseId = 2,
                            Rating = (byte)4,
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartId"));

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BookingTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<short>("CourseType")
                        .HasColumnType("smallint");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("ShoppingCartId")
                        .HasName("PK__TempOrde__38D216B780E2926D");

                    b.HasIndex(new[] { "CourseId" }, "IX_ShoppingCarts_CourseId");

                    b.HasIndex(new[] { "MemberId" }, "IX_ShoppingCarts_MemberId");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            ShoppingCartId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8711),
                            CourseId = 1,
                            CourseType = (short)1,
                            MemberId = 1,
                            Quantity = (short)2,
                            TotalPrice = 1000m,
                            UnitPrice = 500m
                        },
                        new
                        {
                            ShoppingCartId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8713),
                            CourseId = 2,
                            CourseType = (short)1,
                            MemberId = 2,
                            Quantity = (short)1,
                            TotalPrice = 1000m,
                            UnitPrice = 1000m
                        });
                });

            modelBuilder.Entity("Web.Entities.ShoppingCartBooking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateOnly?>("BookingDate")
                        .HasColumnType("date");

                    b.Property<short?>("BookingTime")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("TempShoppingCartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.HasKey("BookingId")
                        .HasName("PK__Shopping__73951AED7A624397");

                    b.HasIndex(new[] { "TempShoppingCartId" }, "IX_ShoppingCartBookings_TempShoppingCartId");

                    b.ToTable("ShoppingCartBookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            BookingTime = (short)800,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8736),
                            CourseId = 1,
                            MemberId = 1,
                            TempShoppingCartId = 1
                        },
                        new
                        {
                            BookingId = 2,
                            BookingTime = (short)900,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8738),
                            CourseId = 2,
                            MemberId = 2,
                            TempShoppingCartId = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.TutorTimeSlot", b =>
                {
                    b.Property<int>("TutorTimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorTimeSlotId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int>("CourseHourId")
                        .HasColumnType("int");

                    b.Property<int>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("TutorTimeSlotId")
                        .HasName("PK__TutorTim__E709EE17B13CB862");

                    b.HasIndex(new[] { "BookingId" }, "IX_TutorTimeSlots_BookingId");

                    b.HasIndex(new[] { "CourseHourId" }, "IX_TutorTimeSlots_CourseHourId");

                    b.HasIndex(new[] { "TutorId" }, "IX_TutorTimeSlots_TutorID");

                    b.ToTable("TutorTimeSlots");

                    b.HasData(
                        new
                        {
                            TutorTimeSlotId = 1,
                            BookingId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8757),
                            CourseHourId = 1,
                            TutorId = 1,
                            Weekday = 1
                        },
                        new
                        {
                            TutorTimeSlotId = 2,
                            BookingId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8760),
                            CourseHourId = 2,
                            TutorId = 2,
                            Weekday = 2
                        });
                });

            modelBuilder.Entity("Web.Entities.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkExperienceId"));

                    b.Property<DateTime>("Cdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CDate");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Udate")
                        .HasColumnType("datetime")
                        .HasColumnName("UDate");

                    b.Property<DateTime>("WorkEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WorkExperienceFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("WorkStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("WorkExperienceId")
                        .HasName("PK__WorkExpe__55A2B889201583D4");

                    b.HasIndex(new[] { "MemberId" }, "IX_WorkExperiences_MemberId");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            WorkExperienceId = 1,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8786),
                            MemberId = 1,
                            WorkEndDate = new DateTime(2023, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8785),
                            WorkExperienceFile = "csharp_experience.pdf",
                            WorkStartDate = new DateTime(2021, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8783)
                        },
                        new
                        {
                            WorkExperienceId = 2,
                            Cdate = new DateTime(2024, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8789),
                            MemberId = 2,
                            WorkEndDate = new DateTime(2022, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8788),
                            WorkExperienceFile = "japanese_experience.pdf",
                            WorkStartDate = new DateTime(2019, 8, 30, 17, 55, 31, 223, DateTimeKind.Local).AddTicks(8787)
                        });
                });

            modelBuilder.Entity("Web.Entities.ApplyList", b =>
                {
                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("ApplyLists")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK__ApplyList__Membe__59FA5E80");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.Booking", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("Bookings")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__Course__5441852A");

                    b.HasOne("Web.Entities.Member", "Student")
                        .WithMany("Bookings")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__Member__534D60F1");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Web.Entities.CourseCategorite", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("CourseCategorites")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseCat__Cours__5812160E");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Web.Entities.CourseImage", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("CourseImages")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseIma__Cours__52593CB8");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Web.Entities.CourseSubject", b =>
                {
                    b.HasOne("Web.Entities.CourseCategorite", "CourseCategory")
                        .WithMany("CourseSubjects")
                        .HasForeignKey("CourseCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseSub__Cours__59063A47");

                    b.Navigation("CourseCategory");
                });

            modelBuilder.Entity("Web.Entities.Member", b =>
                {
                    b.HasOne("Web.Entities.Education", "Education")
                        .WithMany("Members")
                        .HasForeignKey("EducationId")
                        .HasConstraintName("FK__Members__Educati__49C3F6B7");

                    b.HasOne("Web.Entities.Nation", "Nation")
                        .WithMany("Members")
                        .HasForeignKey("NationId")
                        .HasConstraintName("FK__Members__NationI__48CFD27E");

                    b.Navigation("Education");

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("Web.Entities.MemberCoupon", b =>
                {
                    b.HasOne("Web.Entities.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberCoupons_Coupons");

                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_MemberCoupons_Members");

                    b.Navigation("Coupon");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.MemberPreference", b =>
                {
                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("MemberPreferences")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK__MemberPre__Membe__5AEE82B9");

                    b.HasOne("Web.Entities.CourseSubject", "Subjec")
                        .WithMany("MemberPreferences")
                        .HasForeignKey("SubjecId")
                        .IsRequired()
                        .HasConstraintName("FK__MemberPre__Subje__52593CB8");

                    b.Navigation("Member");

                    b.Navigation("Subjec");
                });

            modelBuilder.Entity("Web.Entities.Order", b =>
                {
                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__MemberId__4BAC3F29");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.OrderDetail", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Cours__4E88ABD4");

                    b.HasOne("Web.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Order__4D94879B");

                    b.Navigation("Course");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Web.Entities.ProfessionalLicense", b =>
                {
                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("ProfessionalLicenses")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK__Professio__Membe__5165187F");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.Review", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__CourseI__5070F446");

                    b.HasOne("Web.Entities.Member", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__MemberI__4F7CD00D");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Web.Entities.ShoppingCart", b =>
                {
                    b.HasOne("Web.Entities.Course", "Course")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingCarts_Courses");

                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingCarts_Members");

                    b.Navigation("Course");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.ShoppingCartBooking", b =>
                {
                    b.HasOne("Web.Entities.ShoppingCart", "TempShoppingCart")
                        .WithMany("ShoppingCartBookings")
                        .HasForeignKey("TempShoppingCartId")
                        .HasConstraintName("FK__TempShopp__TempS__60A75C0F");

                    b.Navigation("TempShoppingCart");
                });

            modelBuilder.Entity("Web.Entities.TutorTimeSlot", b =>
                {
                    b.HasOne("Web.Entities.Booking", "Booking")
                        .WithMany("TutorTimeSlots")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__TutorTime__Booki__5DCAEF64");

                    b.HasOne("Web.Entities.CourseHour", "CourseHour")
                        .WithMany("TutorTimeSlots")
                        .HasForeignKey("CourseHourId")
                        .IsRequired()
                        .HasConstraintName("FK__TutorTime__Cours__5EBF139D");

                    b.HasOne("Web.Entities.Member", "Tutor")
                        .WithMany("TutorTimeSlots")
                        .HasForeignKey("TutorId")
                        .IsRequired()
                        .HasConstraintName("FK__TutorTime__Membe__5535A963");

                    b.Navigation("Booking");

                    b.Navigation("CourseHour");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Web.Entities.WorkExperience", b =>
                {
                    b.HasOne("Web.Entities.Member", "Member")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK__WorkExper__Membe__4AB81AF0");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Web.Entities.Booking", b =>
                {
                    b.Navigation("TutorTimeSlots");
                });

            modelBuilder.Entity("Web.Entities.Course", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CourseCategorites");

                    b.Navigation("CourseImages");

                    b.Navigation("OrderDetails");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("Web.Entities.CourseCategorite", b =>
                {
                    b.Navigation("CourseSubjects");
                });

            modelBuilder.Entity("Web.Entities.CourseHour", b =>
                {
                    b.Navigation("TutorTimeSlots");
                });

            modelBuilder.Entity("Web.Entities.CourseSubject", b =>
                {
                    b.Navigation("MemberPreferences");
                });

            modelBuilder.Entity("Web.Entities.Education", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Web.Entities.Member", b =>
                {
                    b.Navigation("ApplyLists");

                    b.Navigation("Bookings");

                    b.Navigation("MemberPreferences");

                    b.Navigation("Orders");

                    b.Navigation("ProfessionalLicenses");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("TutorTimeSlots");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Web.Entities.Nation", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Web.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Web.Entities.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
